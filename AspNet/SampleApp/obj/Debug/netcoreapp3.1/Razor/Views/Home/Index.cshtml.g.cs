#pragma checksum "A:\Programming\DevExtreme\Examples\DataGrid-How-to-implement-a-custom-editing-form-using-dxForm-and-dxPopup\AspNet\SampleApp\SampleApp\Views\Home\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "619f13c1f5292c86d27a2ac17ba4f7cb8c3ed876"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(SampleApp.Models.Home.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
namespace SampleApp.Models.Home
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "A:\Programming\DevExtreme\Examples\DataGrid-How-to-implement-a-custom-editing-form-using-dxForm-and-dxPopup\AspNet\SampleApp\SampleApp\Views\_ViewImports.cshtml"
using SampleApp;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "A:\Programming\DevExtreme\Examples\DataGrid-How-to-implement-a-custom-editing-form-using-dxForm-and-dxPopup\AspNet\SampleApp\SampleApp\Views\_ViewImports.cshtml"
using DevExtreme.AspNet.Mvc;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "A:\Programming\DevExtreme\Examples\DataGrid-How-to-implement-a-custom-editing-form-using-dxForm-and-dxPopup\AspNet\SampleApp\SampleApp\Views\Home\Index.cshtml"
using SampleApp.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"619f13c1f5292c86d27a2ac17ba4f7cb8c3ed876", @"/Views/Home/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"47d7d76fe970a0d7fb21f5de1f0693685216e8e1", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n<h2 class=\"content-block\">Home</h2>\r\n\r\n");
#nullable restore
#line 5 "A:\Programming\DevExtreme\Examples\DataGrid-How-to-implement-a-custom-editing-form-using-dxForm-and-dxPopup\AspNet\SampleApp\SampleApp\Views\Home\Index.cshtml"
Write(Html.DevExtreme().DataGrid()
    .DataSource(new JS("source"))
    .KeyExpr(new JS("key"))
    .Editing(e => e
        .AllowUpdating(true)
        .AllowAdding(true)
        .AllowDeleting(true)
        .UseIcons(true)
        .Mode(GridEditMode.Popup)
    )
    .OnToolbarPreparing("onToolbarPreparing")
    .Columns(columns => {
        columns.Add().DataField("ID");
        columns.Add().DataField("CompanyName");
        columns.Add().DataField("Zipcode");
        columns.Add().DataField("Website");
        columns.Add()
            .Type(GridCommandColumnType.Buttons)
            .Buttons(b =>
            {
                b.Add()
                    .Name("edit")
                    .OnClick("onClickEdit");

                b.Add().Name("delete");
            });
    })
    .OnInitialized("onInitialized")
);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<div id=""popup""></div>

<script>
    let source = [{
        ""ID"": 1,
        ""CompanyName"": ""Super Mart of the West"",
        ""Zipcode"": 72716,
        ""Website"": ""http://www.nowebsitesupermart.com""
    }, {
        ""ID"": 2,
        ""CompanyName"": ""Electronics Depot"",
        ""Zipcode"": 30339,
        ""Website"": ""http://www.nowebsitedepot.com""
    }, {
        ""ID"": 3,
        ""CompanyName"": ""K&S Music"",
        ""Zipcode"": 55403,
        ""Website"": ""http://www.nowebsitemusic.com""
    }]; 

    let key = ""ID"";
    let rowData = {};
    let mode = """";

    // popup instance
    let popup = undefined;
    let grid = undefined;

    function onInitialized(e) {
        grid = e.component;
    }

    function onToolbarPreparing(e) {
        let toolbarItems = e.toolbarOptions.items;

        // customize addRow toolbar button
        toolbarItems.forEach((item) => {
            if (item.name === ""addRowButton"") {
                item.options.onClick = (x) => {
             ");
            WriteLiteral(@"       showPopup(""add"");
                }
            }
        });
    }

    function onClickEdit(e) {
        showPopup(""edit"", e.row.data)
    }

    function showPopup(popupMode, data) {
        if (!popup) {
            popup = createPopUp(popupMode);
        }

        mode = popupMode;

        // popup only updates necessary options
        if (popupMode === ""add"") {
            popup.option({
                title: ""Add"",
                contentTemplate: function (e) { popupTemplate(e); }
            });

            rowData = undefined;
            popup.show();
        } else if (popupMode === ""edit"") {
            popup.option({
                title: ""Edit"",
                contentTemplate: function (e) { popupTemplate(e); }
            });

            rowData = data;
            popup.show();
        }
    }

    // create popup instance
    function createPopUp(popupMode) {
        let popupInstance = $(""#popup"").dxPopup({
            title: popupMode ");
            WriteLiteral(@"=== ""edit"" ? ""Edit"" : ""Add"",
            closeOnOutsideClick: true,
            contentTemplate: popupTemplate,
            toolbarItems: [{
                widget: ""dxButton"",
                location: ""after"",
                toolbar: ""bottom"",
                options: {
                    text: ""Confirm"",
                    type: ""success"",
                    onClick: function (x) {
                        // get form instance by querying for Form
                        let form = $(""#form"").dxForm(""instance"");

                        if (mode === ""edit"") {
                            let result = form.validate();
                            if (result.isValid) {
                                let data = form.option(""formData"");

                                let gridSource = grid.getDataSource();
                                gridSource.store().push([
                                    {
                                        type: ""update"",
                             ");
            WriteLiteral(@"           data: data,
                                        key: data[key]
                                    }
                                ]);
                                gridSource.reload();

                                popup.hide();
                            }
                        } else if (mode === ""add"") {
                            let result = form.validate();
                            if (result.isValid) {
                                let data = form.option(""formData"");

                                let gridSource = grid.getDataSource();
                                gridSource.store().push([
                                    {
                                        type: ""insert"",
                                        data: data
                                    }
                                ]);
                                gridSource.reload();

                                popup.hide();
                            }
          ");
            WriteLiteral(@"              }

                    }
                }
            }, {
                widget: ""dxButton"",
                location: ""after"",
                toolbar: ""bottom"",
                options: {
                    text: ""Cancel"",
                    toolbar: ""bottom"",
                    onClick: function (x) {
                        popup.hide();
                    }
                }
            }]
        }).dxPopup(""instance"");
        return popupInstance;
    }

    // template for PopUp
    function popupTemplate(e) {
        e.append(
            $(""<div />"").attr(""id"", ""form"").dxForm(createForm(rowData, [{
                dataField: ""ID"",
                validationRules: [{
                    type: ""required""
                }]
            }, {
                dataField: ""CompanyName"",
                validationRules: [{
                    type: ""required""
                }]
            }, {
                dataField: ""Zipcode"",
                vali");
            WriteLiteral(@"dationRules: [{
                    type: ""required""
                }]
            }, {
                dataField: ""Website"",
                validationRules: [{
                    type: ""required""
                }]
            }])
            )
        );
    }

    // returns Form options
    // formData: any;
    // formItems: form.items[]; required. if none is detected, it will autogenerate items
    function createForm(formData, formItems) {
        if (!formItems) {
            DevExpress.ui.notify(""createForm() requires 'formItems'"", ""warning"", 5000);
        }

        return {
            formData: formData || {},
            labelLocation: ""top"",
            showColonAfterLabel: true,
            colCountByScreen: {
                lg: 2,
                md: 2,
                sm: 1,
                xs: 1
            },
            items: formItems
        }
    }
</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
